{
  "version": 3,
  "sources": ["../src/uninstall.tsx", "../src/lib/utils.ts", "../src/lib/app-manager.ts", "../src/lib/uninstaller.ts", "../src/lib/constants.ts", "../src/list-item.tsx", "../src/missing-dependency.tsx"],
  "sourcesContent": ["import type { AppItem } from \"./lib\";\n\nimport { List } from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { AppManager, Uninstaller, showError } from \"./lib\";\nimport { ListItem } from \"./list-item\";\nimport { MissingDependency } from \"./missing-dependency\";\n\nconst $apps = new AppManager();\n\nexport default function Command() {\n  const [dependencyError, setDependencyError] = useState(false);\n  const [apps, setApps] = useState<AppItem[]>([]);\n  const [isLoading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    Uninstaller.checkDependencies()\n      .then(() => $apps.getApps())\n      .catch(() => setDependencyError(true));\n\n    $apps.emitter.on(\"update\", onUpdate).on(\"error\", onError);\n  }, []);\n\n  function onUpdate(_apps: AppItem[]) {\n    setLoading(false);\n    setApps(_apps);\n  }\n\n  function onError(error: Error) {\n    setLoading(false);\n    setApps([]);\n    showError(error.message, \"Fetching applications failed.\");\n  }\n\n  if (dependencyError) return <MissingDependency />;\n\n  return (\n    <List isLoading={isLoading} searchBarPlaceholder=\"Search Applications...\">\n      <List.Section title=\"Results\" subtitle={apps?.length + \"\"}>\n        {apps?.map((app) => <ListItem key={app.path} app={app} />)}\n      </List.Section>\n    </List>\n  );\n}\n", "import type { Application } from \"@raycast/api\";\nimport type { SomeObject } from \"./types\";\n\nimport { showToast, Toast } from \"@raycast/api\";\nimport { promises as fsPromises } from \"fs\";\nimport path from \"path\";\n\nfunction isSystem(appPath: string): boolean {\n  const normalizedPath = path.normalize(appPath);\n  if (normalizedPath.startsWith(\"/System/\")) return true;\n  return false;\n}\n\nexport function filterApps(apps: Application[]): Application[] {\n  return apps.filter((app) => isSystem(app.path) === false).sort((a, b) => a.name.localeCompare(b.name));\n}\n\nexport async function pathExists(path: string): Promise<boolean> {\n  return fsPromises\n    .access(path)\n    .then(() => true)\n    .catch(() => false);\n}\n\nexport function showError(message: string, title = \"Error\") {\n  showToast({ style: Toast.Style.Failure, title, message });\n}\n\nexport async function sleep(delay = 500): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, delay));\n}\n\nfunction isObject(object: unknown) {\n  return object != null && typeof object === \"object\";\n}\n\nexport function deepEqual(object1: unknown, object2: unknown) {\n  const keys1 = Object.keys(object1 as SomeObject);\n  const keys2 = Object.keys(object2 as SomeObject);\n  if (keys1.length !== keys2.length) return false;\n\n  for (const key of keys1) {\n    const val1 = (object1 as SomeObject)[key];\n    const val2 = (object2 as SomeObject)[key];\n    const areObjects = isObject(val1) && isObject(val2);\n    if ((!areObjects && val1 !== val2) || (areObjects && !deepEqual(val1, val2))) return false;\n  }\n  return true;\n}\n", "import type { AppItem } from \"./types\";\n\nimport { Application, Cache, getApplications } from \"@raycast/api\";\nimport EventEmitter from \"events\";\nimport { deepEqual, filterApps, sleep } from \"./utils\";\n\n/**\n * AppManager is responsible for fetching and caching apps.\n * It returns the cached apps immediately and then fetches the apps in the background.\n * When the apps are fetched, it compares them to the cached version and emits an update event if they changed.\n */\nexport class AppManager {\n  cache: Cache;\n  emitter: EventEmitter;\n\n  constructor() {\n    this.cache = new Cache();\n    this.emitter = new EventEmitter();\n  }\n\n  public async getApps(): Promise<void> {\n    const apps = this.readCache();\n    if (apps.length) {\n      this.emitter.emit(\"update\", apps);\n      // allow react to render the cached apps\n      await sleep();\n    }\n    // fetch apps, check if they changed from the cached version\n    // and if so - update the cache and emit the update\n    getApplications()\n      .then((_apps: Application[]) => filterApps(_apps))\n      .then((_apps: Application[]) => this.enrich(_apps))\n      .then((_apps: AppItem[]) => {\n        if (deepEqual(_apps, apps)) return; // no changes\n        this.saveCache(_apps);\n        this.emitter.emit(\"update\", _apps);\n      })\n      .catch((error) => {\n        console.error(\"Failed to fetch or process applications:\", error);\n        this.emitter.emit(\"error\", error);\n      });\n  }\n\n  /**\n   * Attach author & location to each app\n   */\n  enrich(apps: Application[]): AppItem[] {\n    const newApps: AppItem[] = [];\n    for (const app of apps) {\n      const location = app.path.split(\"/\").slice(1, -1).join(\"/\");\n      let brand = app.bundleId?.split(\".\")[1] || \"\";\n      brand = brand.charAt(0).toUpperCase() + brand.slice(1);\n\n      newApps.push({ ...app, brand, location });\n    }\n    return newApps;\n  }\n\n  saveCache(apps: AppItem[]) {\n    this.cache.set(\"apps\", JSON.stringify(apps));\n  }\n\n  readCache(): AppItem[] {\n    const cached = this.cache.get(\"apps\");\n    return cached ? JSON.parse(cached) : [];\n  }\n}\n", "import type { Application, PreferenceValues } from \"@raycast/api\";\nimport type { UninstallerApp } from \"./types\";\n\nimport { getPreferenceValues, updateCommandMetadata } from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport { pathExists } from \"./utils\";\nimport { UNINSTALLERS } from \"./constants\";\n\nexport class Uninstaller {\n  /**\n   * Find an uninstaller app. (try the preferred first, and if not found, try the others)\n   * @returns The uninstaller app or undefined if none is found.\n   */\n  static async getUninstaller(): Promise<UninstallerApp | undefined> {\n    const preferred = getPreferenceValues<PreferenceValues>().uninstaller_app;\n    const uninstallers = Array.from(UNINSTALLERS);\n\n    if (preferred) {\n      // sort uninstallers so that the preferred is first\n      uninstallers.sort((a, b) => (a.id === preferred ? -1 : b.id === preferred ? 1 : 0));\n    }\n\n    // return the first one that exists\n    for (const uninstaller of uninstallers) {\n      if (await pathExists(uninstaller.path)) return uninstaller;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Checks if an uninstaller app is available.\n   * @returns A promise that resolves if an uninstaller app is found, otherwise it rejects.\n   */\n  static checkDependencies(): Promise<void> {\n    return Uninstaller.getUninstaller().then((uninstaller) => {\n      if (!uninstaller) throw new Error(\"No uninstaller app found.\");\n      updateCommandMetadata({ subtitle: \"with \" + uninstaller.name });\n    });\n  }\n\n  /**\n   * Launch the uninstaller app for the given app.\n   * @param app The app to uninstall.\n   * @returns A promise that resolves when the uninstaller app is launched.\n   */\n  static async launch(app: Application): Promise<void> {\n    const uninstaller = await Uninstaller.getUninstaller();\n    if (!uninstaller) return Promise.reject(new Error(\"No uninstaller app found.\"));\n\n    return new Promise((resolve, reject) => {\n      exec(`open -a \"${uninstaller.path}\" \"${app.path}\"`, (error) => {\n        if (error) return reject(error);\n        resolve();\n      });\n    });\n  }\n}\n", "export const UNINSTALLERS = [\n  {\n    id: \"appcleaner\",\n    name: \"AppCleaner (by FreeMacSoft)\",\n    path: \"/Applications/AppCleaner.app\",\n    url: \"https://freemacsoft.net/appcleaner/\",\n    icon: \"icon.png\",\n  },\n  {\n    id: \"pearcleaner\",\n    name: \"Pearcleaner\",\n    path: \"/Applications/PearCleaner.app\",\n    url: \"https://itsalin.com/appInfo/?id=pearcleaner\",\n    icon: \"pearcleaner.png\",\n  },\n  {\n    id: \"trashme\",\n    name: \"TrashMe 3\",\n    path: \"/Applications/TrashMe 3.app\",\n    url: \"https://www.jibapps.com/apps/trashme\",\n    icon: \"trashme.png\",\n  },\n  {\n    id: \"appcleaneruninstaller\",\n    name: \"App Cleaner & Uninstaller (by Nektony)\",\n    path: \"/Applications/App Cleaner 8.app\",\n    url: \"https://app-cleaner.com/\",\n    icon: \"appcleaneruninstaller.png\",\n  },\n];\n", "import { Action, ActionPanel, List } from \"@raycast/api\";\nimport { AppItem, Uninstaller, showError } from \"./lib\";\n\nexport function ListItem({ app }: { app: AppItem }) {\n  function uninstall() {\n    Uninstaller.launch(app).catch((error: Error) => {\n      showError(error.toString());\n    });\n  }\n\n  return (\n    <List.Item\n      title={app.name}\n      subtitle={\"by \" + app.brand}\n      accessories={[{ text: \"in \" + app.location }]}\n      icon={{ fileIcon: app.path }}\n      actions={\n        <ActionPanel>\n          <ActionPanel.Section>\n            <Action title=\"Uninstall\" onAction={uninstall} />\n          </ActionPanel.Section>\n        </ActionPanel>\n      }\n    />\n  );\n}\n", "import { Action, ActionPanel, Detail } from \"@raycast/api\";\nimport { UNINSTALLERS } from \"./lib/constants\";\n\nexport function MissingDependency() {\n  const error = `\n# You need at least one of the following uninstallers installed:\n${UNINSTALLERS.map((u) => `- [${u.name}](${u.url})`).join(\"\\n\")}\n`;\n\n  const uninstallersActions = UNINSTALLERS.map((u) => (\n    <Action.OpenInBrowser key={u.id} icon={u.icon} title={`Get ${u.name}`} url={u.url} />\n  ));\n\n  return <Detail markdown={error} navigationTitle=\"Error\" actions={<ActionPanel>{uninstallersActions}</ActionPanel>} />;\n}\n"],
  "mappings": "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",
  "names": ["uninstall_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_api", "import_fs", "import_path", "isSystem", "appPath", "path", "filterApps", "apps", "app", "a", "b", "pathExists", "fsPromises", "showError", "message", "title", "sleep", "delay", "resolve", "isObject", "object", "deepEqual", "object1", "object2", "keys1", "keys2", "key", "val1", "val2", "areObjects", "import_api", "import_events", "AppManager", "EventEmitter", "apps", "sleep", "_apps", "filterApps", "deepEqual", "error", "newApps", "app", "location", "brand", "cached", "import_api", "import_child_process", "UNINSTALLERS", "Uninstaller", "_Uninstaller", "preferred", "uninstallers", "UNINSTALLERS", "a", "b", "uninstaller", "pathExists", "app", "resolve", "reject", "error", "import_api", "import_jsx_runtime", "ListItem", "app", "uninstall", "Uninstaller", "error", "showError", "import_api", "import_jsx_runtime", "MissingDependency", "error", "UNINSTALLERS", "u", "uninstallersActions", "import_jsx_runtime", "$apps", "AppManager", "Command", "dependencyError", "setDependencyError", "apps", "setApps", "isLoading", "setLoading", "Uninstaller", "onUpdate", "onError", "_apps", "error", "showError", "MissingDependency", "app", "ListItem"]
}
