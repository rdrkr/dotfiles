{
  "version": 3,
  "sources": ["../src/backup-configs.ts", "../src/dotfiles.ts", "../src/utils.ts"],
  "sourcesContent": ["import { showHUD, showToast, Toast } from \"@raycast/api\";\nimport { existsSync } from \"fs\";\nimport { DOTFILES } from \"./dotfiles\";\nimport { filesAreIdentical, copyFile, OperationResult } from \"./utils\";\n\nfunction backupDotfile(dotfile: (typeof DOTFILES)[0]): OperationResult {\n  if (!existsSync(dotfile.homePath)) {\n    console.log(`\u26A0\uFE0F  Skipping ${dotfile.name} (doesn't exist in home)`);\n    return \"skip_missing\";\n  }\n\n  if (existsSync(dotfile.repoPath)) {\n    // Check if files are identical\n    if (filesAreIdentical(dotfile.repoPath, dotfile.homePath)) {\n      console.log(`\u23ED\uFE0F  Skipping ${dotfile.name} (files are identical)`);\n      return \"skip_identical\";\n    }\n  }\n\n  try {\n    copyFile(dotfile.homePath, dotfile.repoPath);\n    console.log(`\u2705 ${dotfile.homePath} \u2192 ${dotfile.name}`);\n    return \"success\";\n  } catch (error) {\n    console.log(`\u274C Failed to backup ${dotfile.name}: ${error}`);\n    return \"error\";\n  }\n}\n\nexport default async function main() {\n  try {\n    await showToast({\n      style: Toast.Style.Animated,\n      title: \"Backing up dotfiles...\",\n      message: \"Backing up from home directory to repo\",\n    });\n\n    console.log(\"\uD83D\uDCE6 Backing up dotfiles from home directory -> repo...\");\n\n    let successCount = 0;\n    let skipCount = 0;\n\n    for (const dotfile of DOTFILES) {\n      const result = backupDotfile(dotfile);\n      if (result === \"success\") {\n        successCount++;\n      } else if (result === \"skip_missing\" || result === \"skip_identical\") {\n        skipCount++;\n      }\n    }\n\n    const message = `Backup complete! ${successCount} files backed up, ${skipCount} skipped.`;\n    console.log(`\uD83C\uDF89 ${message}`);\n\n    await showHUD(`\uD83C\uDF89 ${message}`);\n  } catch (error) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Backup failed\",\n      message: String(error),\n    });\n  }\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\nimport { homedir } from \"os\";\nimport { join } from \"path\";\n\nexport interface DotFile {\n  homeRelative: string;\n  repoRelative: string;\n  homePath: string;\n  repoPath: string;\n  name: string;\n}\n\ninterface Preferences {\n  repoPath: string;\n}\n\nconst preferences = getPreferenceValues<Preferences>();\nconst HOME_DIR = homedir();\nconst REPO_DIR = preferences.repoPath;\nconst CONFIG_DIR = REPO_DIR ? join(REPO_DIR, \"config\") : \"\";\n\nexport function validatePreferences(): void {\n  if (!preferences.repoPath) {\n    throw new Error(\"Please set the repoPath in preferences\");\n  }\n}\n\nfunction createDotFile(homeRelative: string, repoRelative: string): DotFile {\n  return {\n    homeRelative,\n    repoRelative,\n    homePath: join(HOME_DIR, homeRelative),\n    repoPath: join(CONFIG_DIR, repoRelative),\n    name: repoRelative.split(\"/\").pop() || repoRelative,\n  };\n}\n\nexport const DOTFILES: DotFile[] = [\n  // shell\n  createDotFile(\".zshrc\", \"zsh/zshrc\"),\n  createDotFile(\".zprofile\", \"zsh/zprofile\"),\n  // git\n  createDotFile(\".config/git/config\", \"git/config\"),\n  createDotFile(\".config/git/ignore\", \"git/ignore\"),\n  createDotFile(\".config/git/gh-config\", \"git/gh-config\"),\n  createDotFile(\".config/git/gl-config\", \"git/gl-config\"),\n  // editor\n  createDotFile(\".editorconfig\", \"editorconfig\"),\n  // tmux\n  createDotFile(\".config/tmux/tmux.conf\", \"tmux/tmux.conf\"),\n  // neovim\n  createDotFile(\".config/nvim/init.lua\", \"nvim/init.lua\"),\n  // vim\n  createDotFile(\".config/vim/vimrc\", \"vim/vimrc\"),\n  // gdb\n  createDotFile(\".config/gdb/gdbinit\", \"gdb/gdbinit\"),\n  // ghostty\n  createDotFile(\".config/ghostty/config\", \"ghostty/config\"),\n  // vscode\n  createDotFile(\n    \"Library/Application Support/Code/User/settings.json\",\n    \"vscode/settings.json\",\n  ),\n  // zed\n  createDotFile(\".config/zed/settings.json\", \"zed/settings.json\"),\n  // ruff\n  createDotFile(\".config/ruff/ruff.toml\", \"ruff/ruff.toml\"),\n];\n", "import { existsSync, readFileSync, copyFileSync, mkdirSync } from \"fs\";\nimport { dirname } from \"path\";\nimport { DotFile } from \"./dotfiles\";\nimport { LaunchType, launchCommand } from \"@raycast/api\";\n\nexport type OperationResult =\n  | \"success\"\n  | \"skip_missing\"\n  | \"skip_identical\"\n  | \"error\";\n\nexport function filesAreIdentical(path1: string, path2: string): boolean {\n  try {\n    if (!existsSync(path1) || !existsSync(path2)) {\n      return false;\n    }\n    const content1 = readFileSync(path1, \"utf8\");\n    const content2 = readFileSync(path2, \"utf8\");\n    return content1 === content2;\n  } catch {\n    return false;\n  }\n}\n\nexport function ensureDirectoryExists(filePath: string): void {\n  const dir = dirname(filePath);\n  if (!existsSync(dir)) {\n    mkdirSync(dir, { recursive: true });\n  }\n}\n\nexport function copyFile(source: string, destination: string): void {\n  ensureDirectoryExists(destination);\n  copyFileSync(source, destination);\n}\n\nexport function getFileStatus(dotfile: DotFile): string {\n  const repoExists = existsSync(dotfile.repoPath);\n  const homeExists = existsSync(dotfile.homePath);\n\n  if (repoExists && homeExists) {\n    if (filesAreIdentical(dotfile.repoPath, dotfile.homePath)) {\n      return \"\u2705\"; // Same\n    } else {\n      return \"\uD83D\uDD04\"; // Different\n    }\n  } else if (repoExists && !homeExists) {\n    return \"\uD83D\uDCE5\"; // Only in repo\n  } else if (!repoExists && homeExists) {\n    return \"\uD83D\uDCE4\"; // Only in home\n  } else {\n    return \"\u274C\"; // Missing everywhere\n  }\n}\n\nexport function runCommand(commandName: string): void {\n  // Launch a command within the same extension\n  launchCommand({\n    name: commandName,\n    type: LaunchType.UserInitiated,\n  });\n}\n"],
  "mappings": "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",
  "names": ["backup_configs_exports", "__export", "main", "__toCommonJS", "import_api", "import_fs", "import_api", "import_os", "import_path", "preferences", "HOME_DIR", "REPO_DIR", "CONFIG_DIR", "createDotFile", "homeRelative", "repoRelative", "HOME_DIR", "CONFIG_DIR", "DOTFILES", "import_fs", "import_path", "import_api", "filesAreIdentical", "path1", "path2", "content1", "content2", "ensureDirectoryExists", "filePath", "dir", "copyFile", "source", "destination", "backupDotfile", "dotfile", "filesAreIdentical", "copyFile", "error", "main", "successCount", "skipCount", "DOTFILES", "result", "message"]
}
