{
  "version": 3,
  "sources": ["../src/show-diffs.tsx", "../src/dotfiles.ts"],
  "sourcesContent": ["import { Detail } from \"@raycast/api\";\nimport { existsSync, readFileSync } from \"fs\";\nimport { useState, useEffect } from \"react\";\nimport { DOTFILES } from \"./dotfiles\";\n\nfunction createSideBySideDiff(\n  repoContent: string,\n  homeContent: string,\n  fileName: string,\n): string {\n  const repoLines = repoContent.split(\"\\n\");\n  const homeLines = homeContent.split(\"\\n\");\n\n  const maxLines = Math.max(repoLines.length, homeLines.length);\n  let foundDifferences = false;\n  let diffOutput = \"\";\n\n  // Find diff sections with context\n  let currentSection: { start: number; end: number } | null = null;\n  const contextLines = 3;\n  const diffSections: { start: number; end: number }[] = [];\n\n  for (let i = 0; i < maxLines; i++) {\n    const repoLine = repoLines[i] || \"\";\n    const homeLine = homeLines[i] || \"\";\n\n    if (repoLine !== homeLine) {\n      foundDifferences = true;\n      if (!currentSection) {\n        currentSection = { start: Math.max(0, i - contextLines), end: i };\n      }\n      currentSection.end = Math.min(maxLines - 1, i + contextLines);\n    } else if (currentSection && i > currentSection.end) {\n      // End current section\n      diffSections.push(currentSection);\n      currentSection = null;\n    }\n  }\n\n  // Handle last section\n  if (currentSection) {\n    diffSections.push(currentSection);\n  }\n\n  if (!foundDifferences) return \"\";\n\n  diffOutput += `## \uD83D\uDCC4 ${fileName}\\n\\n`;\n\n  // Create sections for each diff area\n  diffSections.forEach((section, sectionIndex) => {\n    if (sectionIndex > 0) {\n      diffOutput += \"\\n---\\n\\n\";\n    }\n\n    diffOutput += `**Lines ${section.start + 1}-${section.end + 1}:**\\n\\n`;\n    diffOutput += \"| \uD83C\uDFE0 Home Version | \uD83D\uDCE6 Repo Version |\\n\";\n    diffOutput += \"|-----------------|------------------|\\n\";\n\n    for (let i = section.start; i <= section.end; i++) {\n      const repoLine = repoLines[i] || \"\";\n      const homeLine = homeLines[i] || \"\";\n      const lineNum = i + 1;\n\n      // Escape markdown special characters but preserve line content\n      const escapedHomeLine = escapeMarkdown(homeLine);\n      const escapedRepoLine = escapeMarkdown(repoLine);\n\n      if (repoLine === homeLine) {\n        // Unchanged line - show line number within code block\n        diffOutput += `| \\`${lineNum}: ${escapedHomeLine}\\` | \\`${lineNum}: ${escapedRepoLine}\\` |\\n`;\n      } else {\n        // Changed line - use standard diff format with - and +\n        if (homeLine && repoLine) {\n          // Both have content but different\n          diffOutput += `| \\`- ${lineNum}: ${escapedHomeLine}\\` | \\`+ ${lineNum}: ${escapedRepoLine}\\` |\\n`;\n        } else if (homeLine && !repoLine) {\n          // Only in home (removed from repo)\n          diffOutput += `| \\`- ${lineNum}: ${escapedHomeLine}\\` |  |\\n`;\n        } else if (!homeLine && repoLine) {\n          // Only in repo (added to repo)\n          diffOutput += `|  | \\`+ ${lineNum}: ${escapedRepoLine}\\` |\\n`;\n        }\n      }\n    }\n    diffOutput += \"\\n\";\n  });\n\n  diffOutput += \"---\\n\\n\";\n  return diffOutput;\n}\n\nfunction escapeMarkdown(text: string): string {\n  return text\n    .replace(/\\\\/g, \"\\\\\\\\\")\n    .replace(/\\|/g, \"\\\\|\")\n    .replace(/`/g, \"\\\\`\")\n    .replace(/\\*/g, \"\\\\*\")\n    .replace(/_/g, \"\\\\_\")\n    .replace(/~/g, \"\\\\~\")\n    .replace(/\\[/g, \"\\\\[\")\n    .replace(/\\]/g, \"\\\\]\")\n    .replace(/\\(/g, \"\\\\(\")\n    .replace(/\\)/g, \"\\\\)\")\n    .replace(/#/g, \"\\\\#\")\n    .replace(/\\+/g, \"\\\\+\")\n    .replace(/-/g, \"\\\\-\")\n    .replace(/!/g, \"\\\\!\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\");\n}\n\nexport default function Command() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [markdown, setMarkdown] = useState<string>(\"\");\n\n  useEffect(() => {\n    generateDiffMarkdown();\n  }, []);\n\n  const generateDiffMarkdown = () => {\n    setIsLoading(true);\n    let markdown = \"# \uD83D\uDD0D Dotfiles Differences\\n\\n\";\n    let foundAnyDifferences = false;\n\n    for (const dotfile of DOTFILES) {\n      const repoExists = existsSync(dotfile.repoPath);\n      const homeExists = existsSync(dotfile.homePath);\n\n      if (!repoExists || !homeExists) {\n        foundAnyDifferences = true;\n        markdown += `## \u26A0\uFE0F File Missing: ${dotfile.name}\\n\\n`;\n        if (!repoExists) {\n          markdown += `> \uD83D\uDCE6 \\`${dotfile.repoPath}\\` does not exist in the repository.\\n`;\n        }\n        if (!homeExists) {\n          markdown += `> \uD83C\uDFE0 \\`${dotfile.homePath}\\` does not exist in the home directory.\\n`;\n        }\n        markdown += \"---\\n\\n\";\n        continue;\n      }\n\n      try {\n        const repoContent = readFileSync(dotfile.repoPath, \"utf8\");\n        const homeContent = readFileSync(dotfile.homePath, \"utf8\");\n\n        if (repoContent !== homeContent) {\n          foundAnyDifferences = true;\n          markdown += \"*Side-by-side comparison of your dotfiles*\\n\\n\";\n          const diffOutput = createSideBySideDiff(\n            repoContent,\n            homeContent,\n            dotfile.name,\n          );\n          if (diffOutput) {\n            markdown += `> **\uD83D\uDCCD File paths:**\\n`;\n            markdown += `> \uD83C\uDFE0 \\`${dotfile.homePath}\\`\\n`;\n            markdown += `> \uD83D\uDCE6 \\`${dotfile.repoPath}\\`\\n\\n`;\n            markdown += diffOutput;\n          }\n        }\n      } catch (error) {\n        markdown += `## \u274C Error comparing ${dotfile.name}\\n\\n`;\n        markdown += `Error: ${error instanceof Error ? error.message : String(error)}\\n\\n`;\n        markdown += \"---\\n\\n\";\n      }\n    }\n\n    if (!foundAnyDifferences) {\n      markdown += \"## **\u2705 No differences found!**\\n>\\n\";\n      markdown +=\n        \"> All your dotfiles are perfectly in sync between your repo and home directory. \uD83C\uDF89\\n\";\n    }\n\n    setMarkdown(markdown);\n    setIsLoading(false);\n  };\n\n  return <Detail markdown={markdown} isLoading={isLoading} />;\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\nimport { homedir } from \"os\";\nimport { join } from \"path\";\n\nexport interface DotFile {\n  homeRelative: string;\n  repoRelative: string;\n  homePath: string;\n  repoPath: string;\n  name: string;\n}\n\ninterface Preferences {\n  repoPath: string;\n}\n\nconst preferences = getPreferenceValues<Preferences>();\nconst HOME_DIR = homedir();\nconst REPO_DIR = preferences.repoPath;\nconst CONFIG_DIR = REPO_DIR ? join(REPO_DIR, \"config\") : \"\";\n\nexport function validatePreferences(): void {\n  if (!preferences.repoPath) {\n    throw new Error(\"Please set the repoPath in preferences\");\n  }\n}\n\nfunction createDotFile(homeRelative: string, repoRelative: string): DotFile {\n  return {\n    homeRelative,\n    repoRelative,\n    homePath: join(HOME_DIR, homeRelative),\n    repoPath: join(CONFIG_DIR, repoRelative),\n    name: repoRelative.split(\"/\").pop() || repoRelative,\n  };\n}\n\nexport const DOTFILES: DotFile[] = [\n  // shell\n  createDotFile(\".zshrc\", \"zsh/zshrc\"),\n  createDotFile(\".zprofile\", \"zsh/zprofile\"),\n  // git\n  createDotFile(\".config/git/config\", \"git/config\"),\n  createDotFile(\".config/git/ignore\", \"git/ignore\"),\n  createDotFile(\".config/git/gh-config\", \"git/gh-config\"),\n  createDotFile(\".config/git/gl-config\", \"git/gl-config\"),\n  // editor\n  createDotFile(\".editorconfig\", \"editorconfig\"),\n  // tmux\n  createDotFile(\".config/tmux/tmux.conf\", \"tmux/tmux.conf\"),\n  // neovim\n  createDotFile(\".config/nvim/init.lua\", \"nvim/init.lua\"),\n  // vim\n  createDotFile(\".config/vim/vimrc\", \"vim/vimrc\"),\n  // gdb\n  createDotFile(\".config/gdb/gdbinit\", \"gdb/gdbinit\"),\n  // ghostty\n  createDotFile(\".config/ghostty/config\", \"ghostty/config\"),\n  // vscode\n  createDotFile(\n    \"Library/Application Support/Code/User/settings.json\",\n    \"vscode/settings.json\",\n  ),\n  // zed\n  createDotFile(\".config/zed/settings.json\", \"zed/settings.json\"),\n  // ruff\n  createDotFile(\".config/ruff/ruff.toml\", \"ruff/ruff.toml\"),\n];\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAuB,wBACvBC,EAAyC,cACzCC,EAAoC,iBCFpC,IAAAC,EAAoC,wBACpCC,EAAwB,cACxBC,EAAqB,gBAcfC,KAAc,uBAAiC,EAC/CC,KAAW,WAAQ,EACnBC,EAAWF,EAAY,SACvBG,EAAaD,KAAW,QAAKA,EAAU,QAAQ,EAAI,GAQzD,SAASE,EAAcC,EAAsBC,EAA+B,CAC1E,MAAO,CACL,aAAAD,EACA,aAAAC,EACA,YAAU,QAAKC,EAAUF,CAAY,EACrC,YAAU,QAAKG,EAAYF,CAAY,EACvC,KAAMA,EAAa,MAAM,GAAG,EAAE,IAAI,GAAKA,CACzC,CACF,CAEO,IAAMG,EAAsB,CAEjCL,EAAc,SAAU,WAAW,EACnCA,EAAc,YAAa,cAAc,EAEzCA,EAAc,qBAAsB,YAAY,EAChDA,EAAc,qBAAsB,YAAY,EAChDA,EAAc,wBAAyB,eAAe,EACtDA,EAAc,wBAAyB,eAAe,EAEtDA,EAAc,gBAAiB,cAAc,EAE7CA,EAAc,yBAA0B,gBAAgB,EAExDA,EAAc,wBAAyB,eAAe,EAEtDA,EAAc,oBAAqB,WAAW,EAE9CA,EAAc,sBAAuB,aAAa,EAElDA,EAAc,yBAA0B,gBAAgB,EAExDA,EACE,sDACA,sBACF,EAEAA,EAAc,4BAA6B,mBAAmB,EAE9DA,EAAc,yBAA0B,gBAAgB,CAC1D,ED8GS,IAAAM,EAAA,6BA5KT,SAASC,EACPC,EACAC,EACAC,EACQ,CACR,IAAMC,EAAYH,EAAY,MAAM;AAAA,CAAI,EAClCI,EAAYH,EAAY,MAAM;AAAA,CAAI,EAElCI,EAAW,KAAK,IAAIF,EAAU,OAAQC,EAAU,MAAM,EACxDE,EAAmB,GACnBC,EAAa,GAGbC,EAAwD,KACtDC,EAAe,EACfC,EAAiD,CAAC,EAExD,QAAS,EAAI,EAAG,EAAIL,EAAU,IAAK,CACjC,IAAMM,EAAWR,EAAU,CAAC,GAAK,GAC3BS,EAAWR,EAAU,CAAC,GAAK,GAE7BO,IAAaC,GACfN,EAAmB,GACdE,IACHA,EAAiB,CAAE,MAAO,KAAK,IAAI,EAAG,EAAIC,CAAY,EAAG,IAAK,CAAE,GAElED,EAAe,IAAM,KAAK,IAAIH,EAAW,EAAG,EAAII,CAAY,GACnDD,GAAkB,EAAIA,EAAe,MAE9CE,EAAa,KAAKF,CAAc,EAChCA,EAAiB,KAErB,CAOA,OAJIA,GACFE,EAAa,KAAKF,CAAc,EAG7BF,GAELC,GAAc,gBAASL,CAAQ;AAAA;AAAA,EAG/BQ,EAAa,QAAQ,CAACG,EAASC,IAAiB,CAC1CA,EAAe,IACjBP,GAAc;AAAA;AAAA;AAAA,GAGhBA,GAAc,WAAWM,EAAQ,MAAQ,CAAC,IAAIA,EAAQ,IAAM,CAAC;AAAA;AAAA,EAC7DN,GAAc;AAAA,EACdA,GAAc;AAAA,EAEd,QAASQ,EAAIF,EAAQ,MAAOE,GAAKF,EAAQ,IAAKE,IAAK,CACjD,IAAMJ,EAAWR,EAAUY,CAAC,GAAK,GAC3BH,EAAWR,EAAUW,CAAC,GAAK,GAC3BC,EAAUD,EAAI,EAGdE,EAAkBC,EAAeN,CAAQ,EACzCO,EAAkBD,EAAeP,CAAQ,EAE3CA,IAAaC,EAEfL,GAAc,OAAOS,CAAO,KAAKC,CAAe,UAAUD,CAAO,KAAKG,CAAe;AAAA,EAGjFP,GAAYD,EAEdJ,GAAc,SAASS,CAAO,KAAKC,CAAe,YAAYD,CAAO,KAAKG,CAAe;AAAA,EAChFP,GAAY,CAACD,EAEtBJ,GAAc,SAASS,CAAO,KAAKC,CAAe;AAAA,EACzC,CAACL,GAAYD,IAEtBJ,GAAc,YAAYS,CAAO,KAAKG,CAAe;AAAA,EAG3D,CACAZ,GAAc;AAAA,CAChB,CAAC,EAEDA,GAAc;AAAA;AAAA,EACPA,GA5CuB,EA6ChC,CAEA,SAASW,EAAeE,EAAsB,CAC5C,OAAOA,EACJ,QAAQ,MAAO,MAAM,EACrB,QAAQ,MAAO,KAAK,EACpB,QAAQ,KAAM,KAAK,EACnB,QAAQ,MAAO,KAAK,EACpB,QAAQ,KAAM,KAAK,EACnB,QAAQ,KAAM,KAAK,EACnB,QAAQ,MAAO,KAAK,EACpB,QAAQ,MAAO,KAAK,EACpB,QAAQ,MAAO,KAAK,EACpB,QAAQ,MAAO,KAAK,EACpB,QAAQ,KAAM,KAAK,EACnB,QAAQ,MAAO,KAAK,EACpB,QAAQ,KAAM,KAAK,EACnB,QAAQ,KAAM,KAAK,EACnB,QAAQ,KAAM,MAAM,EACpB,QAAQ,KAAM,MAAM,CACzB,CAEe,SAARC,GAA2B,CAChC,GAAM,CAACC,EAAWC,CAAY,KAAI,YAAS,EAAI,EACzC,CAACC,EAAUC,CAAW,KAAI,YAAiB,EAAE,KAEnD,aAAU,IAAM,CACdC,EAAqB,CACvB,EAAG,CAAC,CAAC,EAEL,IAAMA,EAAuB,IAAM,CACjCH,EAAa,EAAI,EACjB,IAAIC,EAAW;AAAA;AAAA,EACXG,EAAsB,GAE1B,QAAWC,KAAWC,EAAU,CAC9B,IAAMC,KAAa,cAAWF,EAAQ,QAAQ,EACxCG,KAAa,cAAWH,EAAQ,QAAQ,EAE9C,GAAI,CAACE,GAAc,CAACC,EAAY,CAC9BJ,EAAsB,GACtBH,GAAY,iCAAuBI,EAAQ,IAAI;AAAA;AAAA,EAC1CE,IACHN,GAAY,iBAAUI,EAAQ,QAAQ;AAAA,GAEnCG,IACHP,GAAY,iBAAUI,EAAQ,QAAQ;AAAA,GAExCJ,GAAY;AAAA;AAAA,EACZ,QACF,CAEA,GAAI,CACF,IAAMxB,KAAc,gBAAa4B,EAAQ,SAAU,MAAM,EACnD3B,KAAc,gBAAa2B,EAAQ,SAAU,MAAM,EAEzD,GAAI5B,IAAgBC,EAAa,CAC/B0B,EAAsB,GACtBH,GAAY;AAAA;AAAA,EACZ,IAAMjB,EAAaR,EACjBC,EACAC,EACA2B,EAAQ,IACV,EACIrB,IACFiB,GAAY;AAAA,EACZA,GAAY,iBAAUI,EAAQ,QAAQ;AAAA,EACtCJ,GAAY,iBAAUI,EAAQ,QAAQ;AAAA;AAAA,EACtCJ,GAAYjB,EAEhB,CACF,OAASyB,EAAO,CACdR,GAAY,6BAAwBI,EAAQ,IAAI;AAAA;AAAA,EAChDJ,GAAY,UAAUQ,aAAiB,MAAQA,EAAM,QAAU,OAAOA,CAAK,CAAC;AAAA;AAAA,EAC5ER,GAAY;AAAA;AAAA,CACd,CACF,CAEKG,IACHH,GAAY;AAAA;AAAA,EACZA,GACE;AAAA,GAGJC,EAAYD,CAAQ,EACpBD,EAAa,EAAK,CACpB,EAEA,SAAO,OAAC,UAAO,SAAUC,EAAU,UAAWF,EAAW,CAC3D",
  "names": ["show_diffs_exports", "__export", "Command", "__toCommonJS", "import_api", "import_fs", "import_react", "import_api", "import_os", "import_path", "preferences", "HOME_DIR", "REPO_DIR", "CONFIG_DIR", "createDotFile", "homeRelative", "repoRelative", "HOME_DIR", "CONFIG_DIR", "DOTFILES", "import_jsx_runtime", "createSideBySideDiff", "repoContent", "homeContent", "fileName", "repoLines", "homeLines", "maxLines", "foundDifferences", "diffOutput", "currentSection", "contextLines", "diffSections", "repoLine", "homeLine", "section", "sectionIndex", "i", "lineNum", "escapedHomeLine", "escapeMarkdown", "escapedRepoLine", "text", "Command", "isLoading", "setIsLoading", "markdown", "setMarkdown", "generateDiffMarkdown", "foundAnyDifferences", "dotfile", "DOTFILES", "repoExists", "homeExists", "error"]
}
