{
  "version": 3,
  "sources": ["../src/show-commands.tsx", "../src/utils.ts"],
  "sourcesContent": ["import { ActionPanel, Action, List } from \"@raycast/api\";\nimport { runCommand } from \"./utils\";\n\nexport default function Command() {\n  const commands = [\n    {\n      id: \"backup-configs\",\n      title: \"Backup Configs\",\n      subtitle: \"Backup Config Files in Repo\",\n    },\n    {\n      id: \"restore-configs\",\n      title: \"Restore Configs\",\n      subtitle: \"Restore Config Files to Local\",\n    },\n    {\n      id: \"show-diffs\",\n      title: \"Show Diffs\",\n      subtitle: \"Displays Diffs Among Config\",\n    },\n    {\n      id: \"show-status\",\n      title: \"Show Status\",\n      subtitle: \"Displays Status Between Configs\",\n    },\n  ];\n\n  return (\n    <List>\n      {commands.map((command) => (\n        <List.Item\n          key={command.id}\n          title={command.title}\n          subtitle={command.subtitle}\n          actions={\n            <ActionPanel>\n              <Action\n                title={`Run ${command.title}`}\n                onAction={() => {\n                  // Using Raycast's native command API\n                  runCommand(command.id);\n                }}\n              />\n            </ActionPanel>\n          }\n        />\n      ))}\n    </List>\n  );\n}\n", "import { existsSync, readFileSync, copyFileSync, mkdirSync } from \"fs\";\nimport { dirname } from \"path\";\nimport { DotFile } from \"./dotfiles\";\nimport { LaunchType, launchCommand } from \"@raycast/api\";\n\nexport type OperationResult =\n  | \"success\"\n  | \"skip_missing\"\n  | \"skip_identical\"\n  | \"error\";\n\nexport function filesAreIdentical(path1: string, path2: string): boolean {\n  try {\n    if (!existsSync(path1) || !existsSync(path2)) {\n      return false;\n    }\n    const content1 = readFileSync(path1, \"utf8\");\n    const content2 = readFileSync(path2, \"utf8\");\n    return content1 === content2;\n  } catch {\n    return false;\n  }\n}\n\nexport function ensureDirectoryExists(filePath: string): void {\n  const dir = dirname(filePath);\n  if (!existsSync(dir)) {\n    mkdirSync(dir, { recursive: true });\n  }\n}\n\nexport function copyFile(source: string, destination: string): void {\n  ensureDirectoryExists(destination);\n  copyFileSync(source, destination);\n}\n\nexport function getFileStatus(dotfile: DotFile): string {\n  const repoExists = existsSync(dotfile.repoPath);\n  const homeExists = existsSync(dotfile.homePath);\n\n  if (repoExists && homeExists) {\n    if (filesAreIdentical(dotfile.repoPath, dotfile.homePath)) {\n      return \"\u2705\"; // Same\n    } else {\n      return \"\uD83D\uDD04\"; // Different\n    }\n  } else if (repoExists && !homeExists) {\n    return \"\uD83D\uDCE5\"; // Only in repo\n  } else if (!repoExists && homeExists) {\n    return \"\uD83D\uDCE4\"; // Only in home\n  } else {\n    return \"\u274C\"; // Missing everywhere\n  }\n}\n\nexport function runCommand(commandName: string): void {\n  // Launch a command within the same extension\n  launchCommand({\n    name: commandName,\n    type: LaunchType.UserInitiated,\n  });\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAA0C,wBCG1C,IAAAC,EAA0C,wBAoDnC,SAASC,EAAWC,EAA2B,IAEpD,iBAAc,CACZ,KAAMA,EACN,KAAM,aAAW,aACnB,CAAC,CACH,CDzBc,IAAAC,EAAA,6BAjCC,SAARC,GAA2B,CAwBhC,SACE,OAAC,QACE,SAzBY,CACf,CACE,GAAI,iBACJ,MAAO,iBACP,SAAU,6BACZ,EACA,CACE,GAAI,kBACJ,MAAO,kBACP,SAAU,+BACZ,EACA,CACE,GAAI,aACJ,MAAO,aACP,SAAU,6BACZ,EACA,CACE,GAAI,cACJ,MAAO,cACP,SAAU,iCACZ,CACF,EAIc,IAAKC,MACb,OAAC,OAAK,KAAL,CAEC,MAAOA,EAAQ,MACf,SAAUA,EAAQ,SAClB,WACE,OAAC,eACC,mBAAC,UACC,MAAO,OAAOA,EAAQ,KAAK,GAC3B,SAAU,IAAM,CAEdC,EAAWD,EAAQ,EAAE,CACvB,EACF,EACF,GAZGA,EAAQ,EAcf,CACD,EACH,CAEJ",
  "names": ["show_commands_exports", "__export", "Command", "__toCommonJS", "import_api", "import_api", "runCommand", "commandName", "import_jsx_runtime", "Command", "command", "runCommand"]
}
