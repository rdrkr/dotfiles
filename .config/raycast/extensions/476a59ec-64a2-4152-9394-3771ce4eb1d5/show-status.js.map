{
  "version": 3,
  "sources": ["../src/show-status.tsx", "../src/dotfiles.ts", "../src/utils.ts"],
  "sourcesContent": ["import { Detail } from \"@raycast/api\";\nimport { DOTFILES } from \"./dotfiles\";\nimport { getFileStatus } from \"./utils\";\n\nexport default function Command() {\n  const generateStatusMarkdown = () => {\n    let markdown = \"# \uD83D\uDCCB Dotfiles Status\\n\\n\";\n\n    for (const dotfile of DOTFILES) {\n      const status = getFileStatus(dotfile);\n\n      markdown += `## ${status} ${dotfile.name}\\n\\n`;\n      markdown += `**Repo Path:** \\`${dotfile.repoPath}\\`  \\n`;\n      markdown += `**Home Path:** \\`${dotfile.homePath}\\`  \\n`;\n\n      let statusText = \"\";\n      if (status === \"\u2705\") {\n        statusText = \"Files are identical\";\n      } else if (status === \"\uD83D\uDD04\") {\n        statusText = \"Files differ\";\n      } else if (status === \"\uD83D\uDCE5\") {\n        statusText = \"Only exists in repo\";\n      } else if (status === \"\uD83D\uDCE4\") {\n        statusText = \"Only exists in home\";\n      } else if (status === \"\u274C\") {\n        statusText = \"Missing from both locations\";\n      }\n\n      markdown += `**Status:** ${statusText}\\n\\n`;\n      markdown += \"---\\n\\n\";\n    }\n\n    markdown += \"## Legend\\n\\n\";\n    markdown += \"- \u2705 Files are identical\\n\";\n    markdown += \"- \uD83D\uDD04 Files differ\\n\";\n    markdown += \"- \uD83D\uDCE5 Only exists in repo\\n\";\n    markdown += \"- \uD83D\uDCE4 Only exists in home\\n\";\n    markdown += \"- \u274C Missing from both locations\\n\";\n\n    return markdown;\n  };\n\n  return <Detail markdown={generateStatusMarkdown()} />;\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\nimport { homedir } from \"os\";\nimport { join } from \"path\";\n\nexport interface DotFile {\n  homeRelative: string;\n  repoRelative: string;\n  homePath: string;\n  repoPath: string;\n  name: string;\n}\n\ninterface Preferences {\n  repoPath: string;\n}\n\nconst preferences = getPreferenceValues<Preferences>();\nconst HOME_DIR = homedir();\nconst REPO_DIR = preferences.repoPath;\nconst CONFIG_DIR = REPO_DIR ? join(REPO_DIR, \"config\") : \"\";\n\nexport function validatePreferences(): void {\n  if (!preferences.repoPath) {\n    throw new Error(\"Please set the repoPath in preferences\");\n  }\n}\n\nfunction createDotFile(homeRelative: string, repoRelative: string): DotFile {\n  return {\n    homeRelative,\n    repoRelative,\n    homePath: join(HOME_DIR, homeRelative),\n    repoPath: join(CONFIG_DIR, repoRelative),\n    name: repoRelative.split(\"/\").pop() || repoRelative,\n  };\n}\n\nexport const DOTFILES: DotFile[] = [\n  // shell\n  createDotFile(\".zshrc\", \"zsh/zshrc\"),\n  createDotFile(\".zprofile\", \"zsh/zprofile\"),\n  // git\n  createDotFile(\".config/git/config\", \"git/config\"),\n  createDotFile(\".config/git/ignore\", \"git/ignore\"),\n  createDotFile(\".config/git/gh-config\", \"git/gh-config\"),\n  createDotFile(\".config/git/gl-config\", \"git/gl-config\"),\n  // editor\n  createDotFile(\".editorconfig\", \"editorconfig\"),\n  // tmux\n  createDotFile(\".config/tmux/tmux.conf\", \"tmux/tmux.conf\"),\n  // neovim\n  createDotFile(\".config/nvim/init.lua\", \"nvim/init.lua\"),\n  // vim\n  createDotFile(\".config/vim/vimrc\", \"vim/vimrc\"),\n  // gdb\n  createDotFile(\".config/gdb/gdbinit\", \"gdb/gdbinit\"),\n  // ghostty\n  createDotFile(\".config/ghostty/config\", \"ghostty/config\"),\n  // vscode\n  createDotFile(\n    \"Library/Application Support/Code/User/settings.json\",\n    \"vscode/settings.json\",\n  ),\n  // zed\n  createDotFile(\".config/zed/settings.json\", \"zed/settings.json\"),\n  // ruff\n  createDotFile(\".config/ruff/ruff.toml\", \"ruff/ruff.toml\"),\n];\n", "import { existsSync, readFileSync, copyFileSync, mkdirSync } from \"fs\";\nimport { dirname } from \"path\";\nimport { DotFile } from \"./dotfiles\";\nimport { LaunchType, launchCommand } from \"@raycast/api\";\n\nexport type OperationResult =\n  | \"success\"\n  | \"skip_missing\"\n  | \"skip_identical\"\n  | \"error\";\n\nexport function filesAreIdentical(path1: string, path2: string): boolean {\n  try {\n    if (!existsSync(path1) || !existsSync(path2)) {\n      return false;\n    }\n    const content1 = readFileSync(path1, \"utf8\");\n    const content2 = readFileSync(path2, \"utf8\");\n    return content1 === content2;\n  } catch {\n    return false;\n  }\n}\n\nexport function ensureDirectoryExists(filePath: string): void {\n  const dir = dirname(filePath);\n  if (!existsSync(dir)) {\n    mkdirSync(dir, { recursive: true });\n  }\n}\n\nexport function copyFile(source: string, destination: string): void {\n  ensureDirectoryExists(destination);\n  copyFileSync(source, destination);\n}\n\nexport function getFileStatus(dotfile: DotFile): string {\n  const repoExists = existsSync(dotfile.repoPath);\n  const homeExists = existsSync(dotfile.homePath);\n\n  if (repoExists && homeExists) {\n    if (filesAreIdentical(dotfile.repoPath, dotfile.homePath)) {\n      return \"\u2705\"; // Same\n    } else {\n      return \"\uD83D\uDD04\"; // Different\n    }\n  } else if (repoExists && !homeExists) {\n    return \"\uD83D\uDCE5\"; // Only in repo\n  } else if (!repoExists && homeExists) {\n    return \"\uD83D\uDCE4\"; // Only in home\n  } else {\n    return \"\u274C\"; // Missing everywhere\n  }\n}\n\nexport function runCommand(commandName: string): void {\n  // Launch a command within the same extension\n  launchCommand({\n    name: commandName,\n    type: LaunchType.UserInitiated,\n  });\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAuB,wBCAvB,IAAAC,EAAoC,wBACpCC,EAAwB,cACxBC,EAAqB,gBAcfC,KAAc,uBAAiC,EAC/CC,KAAW,WAAQ,EACnBC,EAAWF,EAAY,SACvBG,EAAaD,KAAW,QAAKA,EAAU,QAAQ,EAAI,GAQzD,SAASE,EAAcC,EAAsBC,EAA+B,CAC1E,MAAO,CACL,aAAAD,EACA,aAAAC,EACA,YAAU,QAAKC,EAAUF,CAAY,EACrC,YAAU,QAAKG,EAAYF,CAAY,EACvC,KAAMA,EAAa,MAAM,GAAG,EAAE,IAAI,GAAKA,CACzC,CACF,CAEO,IAAMG,EAAsB,CAEjCL,EAAc,SAAU,WAAW,EACnCA,EAAc,YAAa,cAAc,EAEzCA,EAAc,qBAAsB,YAAY,EAChDA,EAAc,qBAAsB,YAAY,EAChDA,EAAc,wBAAyB,eAAe,EACtDA,EAAc,wBAAyB,eAAe,EAEtDA,EAAc,gBAAiB,cAAc,EAE7CA,EAAc,yBAA0B,gBAAgB,EAExDA,EAAc,wBAAyB,eAAe,EAEtDA,EAAc,oBAAqB,WAAW,EAE9CA,EAAc,sBAAuB,aAAa,EAElDA,EAAc,yBAA0B,gBAAgB,EAExDA,EACE,sDACA,sBACF,EAEAA,EAAc,4BAA6B,mBAAmB,EAE9DA,EAAc,yBAA0B,gBAAgB,CAC1D,ECnEA,IAAAM,EAAkE,cAGlE,IAAAC,EAA0C,wBAQnC,SAASC,EAAkBC,EAAeC,EAAwB,CACvE,GAAI,CACF,GAAI,IAAC,cAAWD,CAAK,GAAK,IAAC,cAAWC,CAAK,EACzC,MAAO,GAET,IAAMC,KAAW,gBAAaF,EAAO,MAAM,EACrCG,KAAW,gBAAaF,EAAO,MAAM,EAC3C,OAAOC,IAAaC,CACtB,MAAQ,CACN,MAAO,EACT,CACF,CAcO,SAASC,EAAcC,EAA0B,CACtD,IAAMC,KAAa,cAAWD,EAAQ,QAAQ,EACxCE,KAAa,cAAWF,EAAQ,QAAQ,EAE9C,OAAIC,GAAcC,EACZC,EAAkBH,EAAQ,SAAUA,EAAQ,QAAQ,EAC/C,SAEA,YAEAC,GAAc,CAACC,EACjB,YACE,CAACD,GAAcC,EACjB,YAEA,QAEX,CFXS,IAAAE,EAAA,6BAtCM,SAARC,GAA2B,CAsChC,SAAO,OAAC,UAAO,UArCgB,IAAM,CACnC,IAAIC,EAAW;AAAA;AAAA,EAEf,QAAWC,KAAWC,EAAU,CAC9B,IAAMC,EAASC,EAAcH,CAAO,EAEpCD,GAAY,MAAMG,CAAM,IAAIF,EAAQ,IAAI;AAAA;AAAA,EACxCD,GAAY,oBAAoBC,EAAQ,QAAQ;AAAA,EAChDD,GAAY,oBAAoBC,EAAQ,QAAQ;AAAA,EAEhD,IAAII,EAAa,GACbF,IAAW,SACbE,EAAa,sBACJF,IAAW,YACpBE,EAAa,eACJF,IAAW,YACpBE,EAAa,sBACJF,IAAW,YACpBE,EAAa,sBACJF,IAAW,WACpBE,EAAa,+BAGfL,GAAY,eAAeK,CAAU;AAAA;AAAA,EACrCL,GAAY;AAAA;AAAA,CACd,CAEA,OAAAA,GAAY;AAAA;AAAA,EACZA,GAAY;AAAA,EACZA,GAAY;AAAA,EACZA,GAAY;AAAA,EACZA,GAAY;AAAA,EACZA,GAAY;AAAA,EAELA,CACT,GAEgD,EAAG,CACrD",
  "names": ["show_status_exports", "__export", "Command", "__toCommonJS", "import_api", "import_api", "import_os", "import_path", "preferences", "HOME_DIR", "REPO_DIR", "CONFIG_DIR", "createDotFile", "homeRelative", "repoRelative", "HOME_DIR", "CONFIG_DIR", "DOTFILES", "import_fs", "import_api", "filesAreIdentical", "path1", "path2", "content1", "content2", "getFileStatus", "dotfile", "repoExists", "homeExists", "filesAreIdentical", "import_jsx_runtime", "Command", "markdown", "dotfile", "DOTFILES", "status", "getFileStatus", "statusText"]
}
