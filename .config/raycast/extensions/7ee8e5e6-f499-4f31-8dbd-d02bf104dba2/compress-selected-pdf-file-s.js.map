{
  "version": 3,
  "sources": ["../src/compress-selected-pdf-file-s.ts", "swift:/Users/runner/work/extensions/extensions/extensions/pdf-compression/swift"],
  "sourcesContent": ["import { showToast, Toast, getSelectedFinderItems, showInFinder, FileSystemItem } from \"@raycast/api\";\nimport { basename, dirname, join, extname } from \"path\";\nimport { copyFile, access, constants } from \"fs/promises\";\nimport { compressPDF } from \"swift:../swift\";\n\ninterface PDFCompressionResult {\n  originalSize: number;\n  compressedSize: number;\n  compressedURL: string;\n  savedPercentage: number;\n}\n\nasync function fileExists(path: string): Promise<boolean> {\n  try {\n    await access(path, constants.F_OK);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport default async function main() {\n  // Get selected files in Finder\n  let pdfs: FileSystemItem[] = [];\n\n  try {\n    const selectedItems = await getSelectedFinderItems();\n    if (!selectedItems.length) {\n      throw new Error(\"No PDF selected\");\n    }\n\n    pdfs = selectedItems.filter((item) => item.path.endsWith(\".pdf\"));\n    if (pdfs.length === 0) {\n      throw new Error(\"No PDF selected\");\n    }\n  } catch (error) {\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Could not get selected PDF files\",\n      message: String(error).trim().replace(\"Error: \", \"\"),\n    });\n  }\n\n  for (const pdf of pdfs) {\n    const fileName = basename(pdf.path);\n    await showToast({ style: Toast.Style.Animated, title: `Compressing ${fileName}` });\n\n    // The new file name will be the original file name with ' - compressed' appended\n    const originalDir = dirname(pdf.path);\n    const originalBase = basename(pdf.path, extname(pdf.path));\n    const newFileName = `${originalBase} - compressed${extname(pdf.path)}`;\n    const newFilePath = join(originalDir, newFileName);\n\n    // Check if the file already exists\n    if (await fileExists(newFilePath)) {\n      await showToast({\n        style: Toast.Style.Failure,\n        title: `\"${newFileName}\" already exists.`,\n      });\n      continue;\n    }\n\n    try {\n      // Call the Swift function\n      const result = (await compressPDF(pdf.path)) as PDFCompressionResult;\n      if (result.savedPercentage === 0) {\n        await showToast({\n          style: Toast.Style.Failure,\n          title: `No improvement`,\n          message: `${fileName} could not be compressed further.`,\n        });\n        continue;\n      }\n\n      // Copy compressed file to the same directory as the original\n      await copyFile(result.compressedURL, newFilePath);\n      await showToast({\n        style: Toast.Style.Success,\n        title: `Compressed ${fileName}`,\n        message: `Saved ${result.savedPercentage}% (${formatSize(result.originalSize)} \u2192 ${formatSize(result.compressedSize)})`,\n      });\n      await showInFinder(newFilePath);\n    } catch (err) {\n      await showToast({\n        style: Toast.Style.Failure,\n        title: `Failed to compress ${fileName}`,\n        message: err instanceof Error ? err.message : String(err),\n      });\n    }\n  }\n}\n\nfunction formatSize(bytes: number): string {\n  if (bytes < 1024) return `${bytes} B`;\n  if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;\n  return `${(bytes / 1024 / 1024).toFixed(1)} MB`;\n}\n", "\nimport { environment } from \"@raycast/api\";\nimport { join } from \"path\";\nimport { chmod } from \"fs/promises\";\nimport { spawn } from \"child_process\";\n\nasync function runSwiftFunction(command, ...args) {\n  const swiftPath = join(environment.assetsPath, \"compiled_raycast_swift/swift\");\n  await chmod(swiftPath, \"755\");\n\n  return new Promise((resolve, reject) => {\n    const commandArgs = [command];\n    for (const arg of args) {\n      try {\n        commandArgs.push(JSON.stringify(arg, (k, v) => v === undefined ? null : v));\n      } catch (err) {\n        reject(new SwiftError(\"Failed to serialize input to JSON: \" + err.message));\n        return;\n      }\n    }\n    const child = spawn(swiftPath, commandArgs);\n    const stdout = [];\n    const stderr = [];\n\n    child.stdout?.on(\"data\", (data) => {\n      stdout.push(data.toString());\n    });\n    child.stderr?.on(\"data\", (data) => {\n      stderr.push(data.toString());\n    });\n\n    child.on(\"exit\", (code) => {\n      if (code === 0) {\n        try {\n          const result = stdout.join(\"\").trim();\n          if (result.length != 0) {\n            resolve(JSON.parse(result));\n          } else {\n            resolve(null);\n          }\n        } catch (err) {\n          const error = new SwiftError(\"Failed to deserialize result from JSON: \" + err.message);\n          error.stdout = stdout.join(\"\").trim();\n          error.stderr = stderr.join(\"\").trim();\n          reject(error);\n        }\n      } else {\n        const error = new SwiftError(stderr.join(\"\").trim() || stdout.join(\"\").trim() || \"Could not get any data\");\n        error.stdout = stdout.join(\"\").trim();\n        error.stderr = stderr.join(\"\").trim();\n        reject(error);\n      }\n    });\n\n    child.on(\"error\", (error) => {\n      reject(error);\n    });\n  });\n}\n\nexport async function compressPDF(inputPath) {\n  return await runSwiftFunction(\"compressPDF\", inputPath)\n}\n\nexport class SwiftError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"SwiftError\";\n  }\n}\n"],
  "mappings": "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",
  "names": ["compress_selected_pdf_file_s_exports", "__export", "main", "__toCommonJS", "import_api", "import_path", "import_promises", "import_api", "import_path", "import_promises", "import_child_process", "runSwiftFunction", "command", "args", "swiftPath", "resolve", "reject", "commandArgs", "arg", "k", "v", "err", "SwiftError", "child", "stdout", "stderr", "data", "code", "result", "error", "compressPDF", "inputPath", "message", "fileExists", "path", "main", "pdfs", "selectedItems", "item", "error", "pdf", "fileName", "originalDir", "newFileName", "newFilePath", "result", "compressPDF", "formatSize", "err", "bytes"]
}
